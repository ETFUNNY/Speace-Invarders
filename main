import cv2
import mediapipe as mp
import pygame
import time
import random
from pygame.locals import *
from pygame import font
import os


capture = cv2.VideoCapture(0)

pygame.init()
screen_width, screen_height = 600, 800
screen = pygame.display.set_mode((screen_width, screen_height))
clock = pygame.time.Clock()

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5,
                       min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils


background_image = pygame.image.load('bg.png')

bullet_sound = pygame.mixer.Sound("attack.wav")
attack2_sound = pygame.mixer.Sound("attack2.wav")
last_shot_time = 0
shot_interval = 2000



image = pygame.image.load('spaceship.png')
image_rect = image.get_rect()
image_x = (screen_width - image_rect.width) // 2
image_y = screen_height - image_rect.height


bullet_image = pygame.image.load('bullet.png')
bullet_rect = bullet_image.get_rect()
bullet_x = -bullet_rect.width
bullet_y = -bullet_rect.height
bullet_speed = 40


y_threshold = 200
left_hand_detected = False
right_hand_detected = False
gesture1 = "None"
gesture2 = "None"
pTime = 0

font = cv2.FONT_HERSHEY_SIMPLEX
font_scale = 1.5
font_thickness = 5
game_over_font = pygame.font.SysFont("Arial", 50)
game_over_surface = game_over_font.render("Game Over", True, (255, 0, 255))
game_over = False

bullet_list = []
# Load alien images
alien_images = []
for i in range(1, 6):
    filename = f"alien{i}.png"
    alien_image = pygame.image.load(filename)
    alien_images.append(alien_image)

alien_list = []
alien_rects = []
alien_speeds = []
alien_count = len(alien_images)
alien_width = alien_images[0].get_width()
alien_height = alien_images[0].get_height()
spacing = 50
num_rows = 6
num_cols = 7

start_x = (screen_width - (num_cols * (alien_width + spacing)) + spacing) // 2
# print(type(start_x))
start_y = (screen_height - (num_rows * (alien_height + spacing)) + spacing - 200) // 2
# print(type(start_x))
num_aline = num_rows * num_cols
screen = pygame.display.set_mode((screen_width, screen_height), pygame.DOUBLEBUF)

for i in range(num_rows):
    for j in range(num_cols):
        alien_image = alien_images[i % len(alien_images)]
        alien_rect = alien_image.get_rect()
        alien_x = start_x + (alien_width + spacing) * j
        alien_y = start_y + (alien_height + spacing) * i
        alien_speed_x = random.uniform(-2, 1)
        alien_speed_y = random.uniform(-2, 1)
        alien_rect.topleft = (alien_x, alien_y)
        alien_rects.append(alien_rect)
        alien_speeds.append((alien_speed_x, alien_speed_y))
collided_aliens = []
health = 3
score = 0


def draw_health_bar(surface, x, y, width, height, health):

    cell_width = width // 3
    pygame.draw.rect(surface, (255, 0, 0), (x, y, width, height))
    green_cells = min(health, 3)
    for i in range(green_cells):
        cell_x = x + i * cell_width
        pygame.draw.rect(surface, (0, 255, 0), (cell_x, y, cell_width + 10, height))
    for i in range(max(health, 0), 3):
        cell_x = x + i * cell_width
        pygame.draw.rect(surface, (255, 0, 0), (cell_x, y, cell_width, height))


last_collision_time = 0
can_collide = True
collided_aliens = []
game_over_delay = 1

running = True
bullet_fired = False
while running:
    for i, alien_rect in enumerate(alien_rects):
        if i in collided_aliens:
            continue
        alien_speed_x, alien_speed_y = alien_speeds[i]
        alien_rect.x += alien_speed_x
        alien_rect.y += alien_speed_y
        if alien_rect.left < 0 or alien_rect.right > screen_width:
            alien_speed_x *= -1
            alien_speeds[i] = (alien_speed_x, alien_speed_y)
        if alien_rect.top < 0 or alien_rect.bottom > screen_height:
            alien_speed_y *= -1
            alien_speeds[i] = (alien_speed_x, alien_speed_y)
        alien_rects[i] = alien_rect

    pygame.display.flip()
    clock.tick(60)
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
        if event.type == KEYDOWN and event.key == K_ESCAPE:
            running = False

    ret, img = capture.read()
    if ret:
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        result = hands.process(imgRGB)

        imgHeight = img.shape[0]
        imgWidth = img.shape[1]
        half_width = imgWidth // 2

        left_hand_detected = False
        right_hand_detected = False
        if result.multi_hand_landmarks:
            for handLms in result.multi_hand_landmarks:
                mp_drawing.draw_landmarks(img, handLms, mp_hands.HAND_CONNECTIONS)
                for i, lm in enumerate(handLms.landmark):
                    xPos = int(lm.x * imgWidth)
                    yPos = int(lm.y * imgHeight)

                    if xPos < half_width and yPos < y_threshold:
                        left_hand_detected = True
                        gesture1 = "Left Hand"
                    elif xPos > half_width and yPos < y_threshold:
                        right_hand_detected = True
                        gesture1 = "Right Hand"
                    if left_hand_detected and not right_hand_detected:
                        cv2.putText(img, "right", (imgWidth - 200, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 5)
                    elif right_hand_detected and not left_hand_detected:
                        cv2.putText(img, "left", (imgWidth - 200, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 5)

        if result.multi_hand_landmarks:
            for hand_landmarks in result.multi_hand_landmarks:
                fist_landmarks = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_CMC]
                if fist_landmarks:
                    index_finger_landmark = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
                    middle_finger_landmark = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]
                    ring_finger_landmark = hand_landmarks.landmark[mp_hands.HandLandmark.RING_FINGER_TIP]
                    pinky_finger_landmark = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_TIP]

                    if index_finger_landmark.y < middle_finger_landmark.y < ring_finger_landmark.y < pinky_finger_landmark.y:
                        cv2.putText(img, "Attack!", (30, imgHeight - 20), font, font_scale, (0, 0, 255), font_thickness)
                        gesture2 = "Attack"

                        if not bullet_fired:
                            bullet_x = image_x + (image_rect.width - bullet_rect.width) // 2
                            bullet_y = image_y - bullet_rect.height
                            bullet_fired = True

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime
        cv2.putText(img, f"FPS : {int(fps)}", (30, 50), font, font_scale, (255, 0, 0), font_thickness)
        cv2.imshow('img', img)

        if gesture1 == "Left Hand":
            image_x += 10
        elif gesture1 == "Right Hand":
            image_x -= 10

        if bullet_fired:
            bullet_y -= bullet_speed
            if bullet_y < 0:
                bullet_fired = False

        if image_x < 0:
            image_x = 0
        elif image_x > 600 - image_rect.width:
            image_x = 600 - image_rect.width

        if image_y < 0:
            image_y = 0
        elif image_y > 800 - image_rect.height:
            image_y = 800 - image_rect.height

        screen.blit(background_image, (0, 0))
        screen.blit(bullet_image, (bullet_x, bullet_y))
        if screen.blit(bullet_image, (bullet_x, bullet_y)):
            last_shot_time = current_time
            bullet_sound.play()

        screen.blit(image, (image_x, image_y))
        for i, alien_rect in enumerate(alien_rects):
            if i not in collided_aliens:
                screen.blit(alien_images[i % len(alien_images)], alien_rect)

        for i in range(len(alien_rects)):
            alien_rect = alien_rects[i]
            alien_speed_x, alien_speed_y = alien_speeds[i]

            alien_rect.x += alien_speed_x
            alien_rect.y += alien_speed_y

            if alien_rect.left < 0 or alien_rect.right > screen_width:
                alien_speed_x *= -1  # 改变x轴方向
            if alien_rect.top < 0 or alien_rect.bottom > 800:
                alien_speed_y *= -1  # 改变y轴方向
            alien_rects[i] = alien_rect
            alien_speeds[i] = (alien_speed_x, alien_speed_y)

            image_rect.x = image_x
            image_rect.y = image_y
            bullet_rect.x = bullet_x
            bullet_rect.y = bullet_y

            if bullet_rect.colliderect(alien_rect):
                last_shot_time = current_time
                attack2_sound.play()

            if image_rect.colliderect(alien_rect):
                if can_collide:
                    health -= 1
                    can_collide = False
                    last_collision_time = time.time()
            current_time = time.time()
            if not can_collide and current_time - last_collision_time >= 1:
                can_collide = True

            if bullet_rect.colliderect(alien_rect):
                collided_aliens.append(i)

            health_bar_width = 70
            health_bar_height = 10
            health_bar_x = image_x
            health_bar_y = image_y - health_bar_height - 5
            max_health = 3
            draw_health_bar(screen, health_bar_x, health_bar_y, health_bar_width, health_bar_height, health)
            if health == 0:
                game_over = True
                game_over_time = time.time()
            if alien_count == 3:
                game_over = True

            # if not any(alien_rect is not None for alien_rect in alien_rects):
            #     game_over = True
            if len(list(set(collided_aliens))) >= num_rows * num_cols:
                if game_over_time is None:
                    game_over_time = time.time()
            else:
                game_over_time = None

            if game_over_time is not None and time.time() - game_over_time >= game_over_delay:
                game_over = True


            if game_over:
                screen.blit(game_over_surface, (screen_width // 2 - game_over_surface.get_width() // 2,
                                                screen_height // 2 - game_over_surface.get_height() // 2))
                pygame.display.flip()
                pygame.time.delay(5000)
                game_over = False
                image_rect = image.get_rect()
                image_x = (screen_width - image_rect.width) // 2
                image_y = screen_height - image_rect.height
            else:
                pygame.display.flip()

        pygame.display.flip()
        if cv2.waitKey(1) == 27:
            break

capture.release()
cv2.destroyAllWindows()
pygame.quit()
